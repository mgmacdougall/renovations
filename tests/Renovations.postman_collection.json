{
	"info": {
		"_postman_id": "80279ec6-b5f5-4f37-a346-6589bdcc6b30",
		"name": "Renovations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16482640"
	},
	"item": [
		{
			"name": "SmokeTest",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5050",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050"
				}
			},
			"response": []
		},
		{
			"name": "User-Create-Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('message', 'newUser');\r",
							"    pm.expect(responseData.newUser).to.be.an('object').that.has.all.keys('username', 'email', 'password', '_id', 'createdAt', '__v');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the newUser object contains the expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.newUser).to.exist;\r",
							"\r",
							"    const expectedFields = ['username', 'email', 'password', '_id', 'createdAt', '__v'];\r",
							"    expectedFields.forEach(field => {\r",
							"        pm.expect(responseData.newUser).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email must be in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.newUser).to.exist;\r",
							"    pm.expect(responseData.newUser.email).to.exist;\r",
							"    pm.expect(responseData.newUser.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array with at least one user object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the user object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(user => {\r",
							"        pm.expect(user).to.be.an('object');\r",
							"        pm.expect(user).to.have.all.keys('_id', 'username', 'email', 'password', 'createdAt', '__v');\r",
							"        pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/); // Valid email format\r",
							"        pm.expect(user.password).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(user.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(user.__v).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(user => {\r",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5050/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSingleUser",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5050/user/68daed78f7eab6869162a619",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"user",
						"68daed78f7eab6869162a619"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserFind",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a message field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5050/user/search?uname=Mike&uemail=test@12312312test.ca",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"user",
						"search"
					],
					"query": [
						{
							"key": "uname",
							"value": "Mike"
						},
						{
							"key": "uemail",
							"value": "test@12312312test.ca"
						}
					]
				}
			},
			"response": []
		}
	]
}